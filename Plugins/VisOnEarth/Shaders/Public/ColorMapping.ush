


/* Color Mappings: particle speed -> dir -> hsv -> rgb */


float getHueByVector(float2 dir, float hueRange, float hueOffset){
	float hue = (atan2(dir.y, dir.x) / 3.1415927 + 1.0) * 180.0;
	return fmod(hue * hueRange / 360.0 + hueOffset, 360.0);
}

float3 hsvToRgb(float3 hsv){
	int H = (int(hsv.x)) % 360;
	float S = hsv.y;
	float V = hsv.z;
	int Hi = (H / 60) % 6;
	float f = (H / 60.0) - Hi;
	float p = V * (1 - S);
	float q = V * (1 - f * S);
	float t = V * (1 - (1 - f) * S);
	float R, G, B;
	switch (Hi) {
	case 0:
		R = V; G = t; B = p; break;
	case 1:
		R = q; G = V; B = p; break;
	case 2:
		R = p; G = V; B = t; break;
	case 3:
		R = p; G = q; B = V; break;
	case 4:
		R = t; G = p; B = V; break;
	case 5:
		R = V; G = p; B = q; break;
	default:
		R = 0.0, G = 0.0, B = 0.0; break;
	}
	return float3(R, G, B);
}

float3 getColorBySpeed(float4 speed, float hueRange, float hueOffset){
	float H = getHueByVector(speed.xy, hueRange, hueOffset);
	float S = 0.75f;
	float V = 0.75f;
	float3 hsv = float3(H,S,V);
	float3 rgb = hsvToRgb(hsv);
	return rgb;
}